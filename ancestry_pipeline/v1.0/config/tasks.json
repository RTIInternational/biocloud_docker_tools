{
    "batch_extract_gvcf_variants": {
        "inputs": {
            "output_dir": {
                "type": "dir"
            },
            "gvcf_dir": {
                "type": "dir"
            },
            "ref_prefix": {
                "type": "str"
            },
            "sequencing_provider": {
                "type": "str",
                "default": "revvity"
            },
            "argo_api_url": {
                "type": "str",
                "default": "http://argo-early-check-rs-1-server:2746/api/v1/workflows/early-check-rs-1"
            },
            "simultaneous_jobs": {
                "type": "int",
                "default": 50
            },
            "include_monomorphic_positions": {
                "type": "int",
                "default": 0
            },
            "filter_by_qual": {
                "type": "int",
                "default": 0
            },
            "filter_by_gq": {
                "type": "int",
                "default": 0
            },
            "hom_gq_threshold": {
                "type": "int",
                "default": 99
            },
            "het_gq_threshold": {
                "type": "int",
                "default": 48
            }
        },
        "cmd": [
            "python3",
            "/pipeline/scripts/batch_extract_gvcf_variants.py",
            "--output_dir",
            "<inputs.output_dir>",
            "--gvcf_dir",
            "<inputs.gvcf_dir>",
            "--ref_prefix",
            "<inputs.ref_prefix>",
            "--sequencing_provider",
            "<inputs.sequencing_provider>",
            "--argo_api_url",
            "<inputs.argo_api_url>",
            "--simultaneous_jobs",
            "<inputs.simultaneous_jobs>",
            "--include_monomorphic_positions",
            "<inputs.include_monomorphic_positions>",
            "--filter_by_qual",
            "<inputs.filter_by_qual>",
            "--filter_by_gq",
            "<inputs.filter_by_gq>",
            "--hom_gq_threshold",
            "<inputs.hom_gq_threshold>",
            "--het_gq_threshold",
            "<inputs.het_gq_threshold>"
        ],
        "outputs": {
            "plink_merge_list": {
                "type": "file",
                "value": "<inputs.output_dir>plink_merge_list.txt"
            },
            "log": {
                "type": "file",
                "value": "<inputs.output_dir>batch_extract_gvcf_variants.log"
            }
        }
    },
    "get_ref_variants_from_dataset_gvcf": {
        "inputs": {
            "file_in_gvcf": {
                "type": "file"
            },
            "file_in_ref_bim": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "dataset"
            },
            "include_monomorphic_positions": {
                "type": "o",
                "default": "include"
            },
            "filter_by_qual": {
                "type": "int",
                "default": 0
            },
            "filter_by_gq": {
                "type": "int",
                "default": 0
            },
            "hom_gq_threshold": {
                "type": "int",
                "default": 99
            },
            "het_gq_threshold": {
                "type": "int",
                "default": 48
            }
        },
        "cmd": [
            "/pipeline/scripts/get_ref_variants_from_dataset_gvcf.pl",
            "--file_in_gvcf",
            "<inputs.file_in_gvcf>",
            "--file_in_ref_bim",
            "<inputs.file_in_ref_bim>",
            "--file_out_prefix",
            "<inputs.file_out_prefix>",
            "--include_monomorphic_positions",
            "<inputs.include_monomorphic_positions>",
            "--filter_by_qual",
            "<inputs.filter_by_qual>",
            "--filter_by_gq",
            "<inputs.filter_by_gq>",
            "--hom_gq_threshold",
            "<inputs.hom_gq_threshold>",
            "--het_gq_threshold",
            "<inputs.het_gq_threshold>"
        ],
        "outputs": {
            "sample_vcf": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.vcf"
            },
            "variant_list": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_variants.txt"
            },
            "log": {
                "type": "file",
                "value": "get_ref_variants_from_dataset_gvcf.log"
            }
        }
    },
    "convert_vcf_to_bfile": {
        "inputs": {
            "file_in_vcf": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "dataset"
            }
        },
        "cmd": [
            "plink1.9",
            "--vcf",
            "<inputs.file_in_vcf>",
            "--out",
            "<inputs.file_out_prefix>",
            "--make-bed"
        ],
        "outputs": {
            "bed": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bed"
            },
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bim"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.fam"
            },
            "plink_log": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.log"
            },
            "log": {
                "type": "file",
                "value": "convert_vcf_to_bfile.log"
            }
        }
    },
    "merge_bfiles": {
        "inputs": {
            "output_dir": {
                "type": "dir"
            },
            "bfile_merge_list": {
                "type": "file"
            },
            "out_prefix": {
                "type": "str"
            },
            "geno": {
                "type": "float"
            }
        },
        "cmd": [
            "plink1.9",
            "--merge-list",
            "<inputs.bfile_merge_list>",
            "--geno",
            "0",
            "--out",
            "<inputs.out_prefix>",
            "--make-bed"
        ],
        "outputs": {
            "bfile": {
                "type": "str",
                "value": "<inputs.out_prefix>"
            },
            "bed": {
                "type": "file",
                "value": "<inputs.out_prefix>.bed"
            },
            "bim": {
                "type": "file",
                "value": "<inputs.out_prefix>.bim"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.out_prefix>.fam"
            },
            "plink_log": {
                "type": "file",
                "value": "<inputs.out_prefix>.log"
            },
            "log": {
                "type": "file",
                "value": "<inputs.output_dir>merge_bfile_with_reference.log"
            }
        }
    },
    "assign_ids_to_dataset_bim": {
        "inputs": {
            "file_in_dataset_bim": {
                "type": "file"
            },
            "file_in_ref_bim": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str"
            }
        },
        "cmd": [
            "/pipeline/scripts/assign_ids_to_dataset_bim.pl",
            "--file_in_dataset_bim",
            "<inputs.file_in_dataset_bim>",
            "--file_in_ref_bim",
            "<inputs.file_in_ref_bim>",
            "--file_out_dataset_bim",
            "<inputs.file_out_prefix>.bim",
            "--file_out_extract_list",
            "<inputs.file_out_prefix>_extract.txt",
            "--file_out_flip_list",
            "<inputs.file_out_prefix>_flip.txt"
        ],
        "outputs": {
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_dataset_bim>"
            },
            "extract_list": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_extract.txt"
            },
            "flip_list": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_flip.txt"
            },
            "log": {
                "type": "file",
                "value": "assign_ids_to_dataset_bim.log"
            }
        }
    },
    "get_variants_from_bfile": {
        "inputs": {
            "file_in_bed": {
                "type": "file"
            },
            "file_in_bim": {
                "type": "file"
            },
            "file_in_fam": {
                "type": "file"
            },
            "file_in_extract_list": {
                "type": "file"
            },
            "file_in_flip_list": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "dataset"
            }
        },
        "cmd": [
            "plink1.9",
            "--bed",
            "<inputs.file_in_bed>",
            "--bim",
            "<inputs.file_in_bim>",
            "--fam",
            "<inputs.file_in_fam>",
            "--out",
            "<inputs.file_out_prefix>",
            "--flip",
            "<inputs.file_in_flip_list>",
            "--extract",
            "<inputs.file_in_extract_list>",
            "--make-bed"
        ],
        "outputs": {
            "bed": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bed"
            },
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bim"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.fam"
            },
            "plink_log": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.log"
            },
            "log": {
                "type": "file",
                "value": "get_ref_variants_from_dataset_bim.log"
            }
        }
    },
    "get_variants_and_samples_from_bfile": {
        "inputs": {
            "bed": {
                "type": "file"
            },
            "bim": {
                "type": "file"
            },
            "fam": {
                "type": "file"
            },
            "keep": {
                "type": "file"
            },
            "extract": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "ref"
            }
        },
        "cmd": [
            "plink1.9",
            "--bed",
            "<inputs.bed>",
            "--bim",
            "<inputs.bim>",
            "--fam",
            "<inputs.fam>",
            "--keep",
            "<inputs.keep>",
            "--extract",
            "<inputs.extract>",
            "--make-bed",
            "--out",
            "<inputs.file_out_prefix>"
        ],
        "outputs": {
            "bed": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bed"
            },
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bim"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.fam"
            },
            "plink_log": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.log"
            },
            "log": {
                "type": "file",
                "value": "get_variants_and_samples_from_bfile.log"
            }
        }
    },
    "get_ref_samples": {
        "inputs": {
            "file_in_psam": {
                "type": "file"
            },
            "ancestry_pop_type": {
                "type": "str",
                "default": "SUPERPOP"
            },
            "ancestries_to_include": {
                "type": "str",
                "default": "AFR,AMR,EAS,EUR,SAS"
            },
            "file_out_ancestry_id_xref": {
                "type": "str",
                "default": "ancestry_id_xref.tsv"
            },
            "file_out_ref_samples": {
                "type": "str",
                "default": "ref_samples.tsv"
            }
        },
        "cmd": [
            "/pipeline/scripts/get_ref_samples.pl",
            "--file_in_psam",
            "<inputs.file_in_psam>",
            "--pop_type",
            "<inputs.ancestry_pop_type>",
            "--ancestries_to_include",
            "<inputs.ancestries_to_include>",
            "--file_out_ancestry_id_xref",
            "<inputs.file_out_ancestry_id_xref>",
            "--file_out_ref_samples",
            "<inputs.file_out_ref_samples>"
        ],
        "outputs": {
            "ancestry_id_xref": {
                "type": "file",
                "value": "<inputs.file_out_ancestry_id_xref>"
            },
            "ref_samples": {
                "type": "file",
                "value": "<inputs.file_out_ref_samples>"
            },
            "log": {
                "type": "file",
                "value": "get_ref_samples.log"
            }
        }
    },
    "add_pop_ids_to_fam_files": {
        "inputs": {
            "file_in_dataset_fam": {
                "type": "file"
            },
            "file_in_ref_fam": {
                "type": "file"
            },
            "file_in_ref_samples": {
                "type": "file"
            },
            "file_out_dataset_fam": {
                "type": "str"
            },
            "file_out_ref_fam": {
                "type": "str"
            }
        },
        "cmd": [
            "/pipeline/scripts/add_pop_ids_to_fam_files.pl",
            "--file_in_dataset_fam",
            "<inputs.file_in_dataset_fam>",
            "--file_in_ref_fam",
            "<inputs.file_in_ref_fam>",
            "--file_in_ref_samples",
            "<inputs.file_in_ref_samples>",
            "--file_out_dataset_fam",
            "<inputs.file_out_dataset_fam>",
            "--file_out_ref_fam",
            "<inputs.file_out_ref_fam>"
        ],
        "outputs": {
            "dataset_fam": {
                "type": "file",
                "value": "<inputs.file_out_dataset_fam>"
            },
            "ref_fam": {
                "type": "file",
                "value": "<inputs.file_out_ref_fam>"
            },
            "log": {
                "type": "file",
                "value": "add_pop_ids_to_fam_files.log"
            }
        }
    },
    "merge_genotypes": {
        "inputs": {
            "bed_1": {
                "type": "file"
            },
            "bim_1": {
                "type": "file"
            },
            "fam_1": {
                "type": "file"
            },
            "bed_2": {
                "type": "file"
            },
            "bim_2": {
                "type": "file"
            },
            "fam_2": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "merged"
            }
        },
        "cmd": [
            "plink1.9",
            "--bed",
            "<inputs.bed_1>",
            "--bim",
            "<inputs.bim_1>",
            "--fam",
            "<inputs.fam_1>",
            "--bmerge",
            "<inputs.bed_2>",
            "<inputs.bim_2>",
            "<inputs.fam_2>",
            "--make-bed",
            "--allow-no-sex",
            "--out",
            "<inputs.file_out_prefix>"
        ],
        "outputs": {
            "bed": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bed"
            },
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bim"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.fam"
            },
            "missnp": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.missnp"
            },
            "plink_log": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.log"
            },
            "log": {
                "type": "file",
                "value": "merge_genotypes.log"
            }
        }
    },
    "flip_genotypes": {
        "inputs": {
            "bed": {
                "type": "file"
            },
            "bim": {
                "type": "file"
            },
            "fam": {
                "type": "file"
            },
            "flip": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str"
            }
        },
        "cmd": [
            "plink1.9",
            "--bed",
            "<inputs.bed>",
            "--bim",
            "<inputs.bim>",
            "--fam",
            "<inputs.fam>",
            "--flip",
            "<inputs.flip>",
            "--make-bed",
            "--out",
            "<inputs.file_out_prefix>"
        ],
        "outputs": {
            "bed": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bed"
            },
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bim"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.fam"
            },
            "plink_log": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.log"
            },
            "log": {
                "type": "file",
                "value": "flip_ref.log"
            }
        }
    },
    "prepare_smartpca_input": {
        "inputs": {
            "file_in_bed": {
                "type": "file"
            },
            "file_in_bim": {
                "type": "file"
            },
            "file_in_fam": {
                "type": "file"
            },
            "file_in_pop_id_xref": {
                "type": "file"
            },
            "dataset_name": {
                "type": "str"
            },
            "ref_pops": {
                "type": "str",
                "default": "AFR,AMR,EAS,EUR,SAS"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "smartpca_input"
            },
            "smartpca_out_prefix": {
                "type": "str",
                "default": "smartpca"
            }
        },
        "cmd": [
            "/pipeline/scripts/prepare_smartpca_input.pl",
            "--file_in_bed",
            "<inputs.file_in_bed>",
            "--file_in_bim",
            "<inputs.file_in_bim>",
            "--file_in_fam",
            "<inputs.file_in_fam>",
            "--file_in_pop_id_xref",
            "<inputs.file_in_pop_id_xref>",
            "--dataset_name",
            "<inputs.dataset_name>",
            "--ref_pops",
            "<inputs.ref_pops>",
            "--file_out_prefix",
            "<inputs.file_out_prefix>",
            "--smartpca_out_prefix",
            "<inputs.smartpca_out_prefix>"
        ],
        "outputs": {
            "bim": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.bim"
            },
            "bim_xref": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_bim_xref.tsv"
            },
            "fam": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.fam"
            },
            "fam_xref": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_fam_xref.tsv"
            },
            "pop_list": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_pop_list.tsv"
            },
            "par": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_par.txt"
            },
            "log": {
                "type": "file",
                "value": "prepare_smartpca_input.log"
            }
        }
    },
    "smartpca": {
        "inputs": {
            "file_in_par": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "smartpca"
            }
        },
        "cmd": [
            "smartpca",
            "-p",
            "<inputs.file_in_par>"
        ],
        "outputs": {
            "evec": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.evec"
            },
            "eval": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.eval"
            },
            "snpweight": {
                "type": "file",
                "value": "<inputs.file_out_prefix>.snpweight"
            },
            "log": {
                "type": "file",
                "value": "smartpca.log"
            }
        }
    },
    "process_smartpca_results": {
        "inputs": {
            "file_in_evec": {
                "type": "file"
            },
            "file_in_eval": {
                "type": "file"
            },
            "file_in_snpweight": {
                "type": "file"
            },
            "file_in_bim_id_xref": {
                "type": "file"
            },
            "file_in_fam_id_xref": {
                "type": "file"
            },
            "file_out_prefix": {
                "type": "str",
                "default": "smartpca"
            }
        },
        "cmd": [
            "/pipeline/scripts/process_smartpca_results.pl",
            "--file_in_evec",
            "<inputs.file_in_evec>",
            "--file_in_eval",
            "<inputs.file_in_eval>",
            "--file_in_snpweight",
            "<inputs.file_in_snpweight>",
            "--file_in_bim_id_xref",
            "<inputs.file_in_bim_id_xref>",
            "--file_in_fam_id_xref",
            "<inputs.file_in_fam_id_xref>",
            "--file_out_prefix",
            "<inputs.file_out_prefix>"
        ],
        "outputs": {
            "evec": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_evec.tsv"
            },
            "eval": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_eval.tsv"
            },
            "snpweight": {
                "type": "file",
                "value": "<inputs.file_out_prefix>_snpweight.tsv"
            },
            "log": {
                "type": "file",
                "value": "process_smartpca_results.log"
            }
        }
    },
    "assign_ancestry_mahalanobis": {
        "inputs": {
            "file_in_evec": {
                "type": "file"
            },
            "ref_ancestries": {
                "type": "str",
                "default": "AFR,AMR,EAS,EUR,SAS"
            },
            "dataset_name": {
                "type": "str"
            },
            "std_dev_cutoff": {
                "type": "int",
                "default": 3
            },
            "out_dir": {
                "type": "dir"
            }
        },
        "cmd": [
            "Rscript",
            "/pipeline/scripts/assign_ancestry_mahalanobis.R",
            "--file-pcs",
            "<inputs.file_in_evec>",
            "--pc-count",
            "10",
            "--dataset",
            "<inputs.dataset_name>",
            "--dataset-legend-label",
            "<inputs.dataset_name>",
            "--ref-pops",
            "<inputs.ref_ancestries>",
            "--ref-pops-legend-labels",
            "<inputs.ref_ancestries>",
            "--out-dir",
            "<inputs.out_dir>",
            "--use-pcs-count",
            "10",
            "--midpoint-formula",
            "median",
            "--std-dev-cutoff",
            "<inputs.std_dev_cutoff>",
            "--scale-to-ref"
        ],
        "outputs": {
            "log": {
                "type": "file",
                "value": "assign_ancestry_mahalanobis.log"
            },
            "raw_ancestry_assignment": {
                "type": "file",
                "value": "<inputs.dataset_name>_raw_ancestry_assignments.tsv"
            }
        }
    },
    "get_ancestry_assignment": {
        "inputs": {
            "file_in_raw_ancestry_assignment": {
                "type": "file"
            },
            "std_dev_cutoff": {
                "type": "int",
                "default": 3
            },
            "file_out_ancestry_assignment": {
                "type": "str",
                "default": "ancestry_assignment.txt"
            }
        },
        "cmd": [
            "/pipeline/scripts/get_ancestry_assignment.pl",
            "--file_in_raw_ancestry_assignment",
            "<inputs.file_in_raw_ancestry_assignment>",
            "--std_dev_cutoff",
            "<inputs.std_dev_cutoff>",
            "--file_out_ancestry_assignment",
            "<inputs.file_out_ancestry_assignment>"
        ],
        "outputs": {
            "ancestry_assignmment": {
                "type": "file",
                "value": "<inputs.file_out_ancestry_assignment>"
            },
            "log": {
                "type": "file",
                "value": "get_ancestry_assignment.log"
            }
        }
    }
}
