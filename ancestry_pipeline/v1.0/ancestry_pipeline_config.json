{
    "name": "ancestry_assignment",
    "inputs": {
        "gvcf": {
            "type": "file",
            "default": "",
            "required": true
        },
        "ancestry_pop_type": {
            "type": "str",
            "default": "SUPERPOP",
            "required": false
        },
        "ancestries_to_include": {
            "type": "str",
            "default": "AFR,AMR,EAS,EUR,SAS",
            "required": false
        },
        "dataset_name": {
            "type": "str",
            "default": "",
            "required": true
        },
        "final_file_location": {
            "type": "str",
            "default": "",
            "required": true
        },
        "std_dev_cutoff": {
            "type": "int",
            "default": 3,
            "required": false
        },
        "threads": {
            "type": "int",
            "default": 1,
            "required": false
        },
        "variant_position_list": {
            "type": "file",
            "default": "/data/.ref/1000g_variants.tsv",
            "required": false
        },
        "ref_bed": {
            "type": "file",
            "default": "/data/.ref/all_phase3_unique_grch37_dbsnp_b153_ld_pruned.bed",
            "required": false
        },
        "ref_bim": {
            "type": "file",
            "default": "/data/.ref/all_phase3_unique_grch37_dbsnp_b153_ld_pruned.bim",
            "required": false
        },
        "ref_fam": {
            "type": "file",
            "default": "/data/.ref/all_phase3_unique_grch37_dbsnp_b153_ld_pruned.fam",
            "required": false
        },
        "ref_psam": {
            "type": "file",
            "default": "/data/.ref/phase3_orig.psam",
            "required": false
        }
    },
    "tasks": [
        {
            "active": true,
            "name": "get_dataset_variants",
            "inputs": {
                "file_in_gvcf": {
                    "type": "file",
                    "value": "<inputs.gvcf>"
                },
                "file_in_pos_list": {
                    "type": "file",
                    "value": "<inputs.variant_position_list>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>get_dataset_variants/dataset"
                }
            },
            "cmd": [
                "/opt/get_dataset_variants.pl",
                "--file_in_gvcf",
                "<tasks.get_dataset_variants.inputs.file_in_gvcf>",
                "--file_in_pos_list",
                "<tasks.get_dataset_variants.inputs.file_in_pos_list>",
                "--file_out_prefix",
                "<tasks.get_dataset_variants.inputs.file_out_prefix>",
                "--variants_only"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "sample_vcf": {
                    "type": "file",
                    "value": "<tasks.get_dataset_variants.inputs.file_out_prefix>.vcf"
                },
                "variant_list": {
                    "type": "file",
                    "value": "<tasks.get_dataset_variants.inputs.file_out_prefix>_variants.txt"
                },
                "log": {
                    "type": "file",
                    "value": "get_dataset_variants.log"
                }
            }
        },
        {
            "active": true,
            "name": "convert_dataset_to_bfile",
            "inputs": {
                "file_in_vcf": {
                    "type": "file",
                    "value": "<tasks.get_dataset_variants.outputs.sample_vcf>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>convert_dataset_to_bfile/dataset"
                },
                "threads": {
                    "type": "int",
                    "value": "<inputs.threads>"
                }
            },
            "cmd": [
                "plink",
                "--vcf",
                "<tasks.convert_dataset_to_bfile.inputs.file_in_vcf>",
                "--out",
                "<tasks.convert_dataset_to_bfile.inputs.file_out_prefix>",
                "--make-bed",
                "--threads",
                "<tasks.convert_dataset_to_bfile.inputs.threads>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "bed": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.inputs.file_out_prefix>.bed"
                },
                "bim": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.inputs.file_out_prefix>.bim"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.inputs.file_out_prefix>.fam"
                },
                "plink_log": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.inputs.file_out_prefix>.log"
                },
                "log": {
                    "type": "file",
                    "value": "convert_dataset_to_bfile.log"
                }
            }
        },
        {
            "active": true,
            "name": "get_ref_samples",
            "inputs": {
                "file_in_psam": {
                    "type": "file",
                    "value": "<inputs.ref_psam>"
                },
                "ancestry_pop_type": {
                    "type": "str",
                    "value": "<inputs.ancestry_pop_type>"
                },
                "ancestries_to_include": {
                    "type": "str",
                    "value": "<inputs.ancestries_to_include>"
                },
                "file_out_ancestry_id_xref": {
                    "type": "str",
                    "value": "<inputs.final_file_location>get_ref_samples/ancestry_id_xref.tsv"
                },
                "file_out_ref_samples": {
                    "type": "str",
                    "value": "<inputs.final_file_location>get_ref_samples/ref_samples.tsv"
                }
            },
            "cmd": [
                "/opt/get_ref_samples.pl",
                "--file_in_psam",
                "<tasks.get_ref_samples.inputs.file_in_psam>",
                "--pop_type",
                "<tasks.get_ref_samples.inputs.ancestry_pop_type>",
                "--ancestries_to_include",
                "<tasks.get_ref_samples.inputs.ancestries_to_include>",
                "--file_out_ancestry_id_xref",
                "<tasks.get_ref_samples.inputs.file_out_ancestry_id_xref>",
                "--file_out_ref_samples",
                "<tasks.get_ref_samples.inputs.file_out_ref_samples>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "ancestry_id_xref": {
                    "type": "file",
                    "value": "<tasks.get_ref_samples.inputs.file_out_ancestry_id_xref>"
                },
                "ref_samples": {
                    "type": "file",
                    "value": "<tasks.get_ref_samples.inputs.file_out_ref_samples>"
                },
                "log": {
                    "type": "file",
                    "value": "get_ref_samples.log"
                }
            }
        },
        {
            "active": true,
            "name": "add_pop_ids_to_fam_files",
            "inputs": {
                "file_in_dataset_fam": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.outputs.fam>"
                },
                "file_in_ref_fam": {
                    "type": "file",
                    "value": "<inputs.ref_fam>"
                },
                "file_in_ref_samples": {
                    "type": "file",
                    "value": "<tasks.get_ref_samples.outputs.ref_samples>"
                },
                "file_out_dataset_fam": {
                    "type": "str",
                    "value": "<inputs.final_file_location>add_pop_ids_to_fam_files/dataset.fam"
                },
                "file_out_ref_fam": {
                    "type": "str",
                    "value": "<inputs.final_file_location>add_pop_ids_to_fam_files/ref.fam"
                }
            },
            "cmd": [
                "/opt/add_pop_ids_to_fam_files.pl",
                "--file_in_dataset_fam",
                "<tasks.add_pop_ids_to_fam_files.inputs.file_in_dataset_fam>",
                "--file_in_ref_fam",
                "<tasks.add_pop_ids_to_fam_files.inputs.file_in_ref_fam>",
                "--file_in_ref_samples",
                "<tasks.add_pop_ids_to_fam_files.inputs.file_in_ref_samples>",
                "--file_out_dataset_fam",
                "<tasks.add_pop_ids_to_fam_files.inputs.file_out_dataset_fam>",
                "--file_out_ref_fam",
                "<tasks.add_pop_ids_to_fam_files.inputs.file_out_ref_fam>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "dataset_fam": {
                    "type": "file",
                    "value": "<tasks.add_pop_ids_to_fam_files.inputs.file_out_dataset_fam>"
                },
                "ref_fam": {
                    "type": "file",
                    "value": "<tasks.add_pop_ids_to_fam_files.inputs.file_out_ref_fam>"
                },
                "log": {
                    "type": "file",
                    "value": "add_pop_ids_to_fam_files.log"
                }
            }
        },
        {
            "active": true,
            "name": "get_ref_genotypes",
            "inputs": {
                "bed": {
                    "type": "file",
                    "value": "<inputs.ref_bed>"
                },
                "bim": {
                    "type": "file",
                    "value": "<inputs.ref_bim>"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.add_pop_ids_to_fam_files.outputs.ref_fam>"
                },
                "keep": {
                    "type": "file",
                    "value": "<tasks.get_ref_samples.outputs.ref_samples>"
                },
                "extract": {
                    "type": "file",
                    "value": "<tasks.get_dataset_variants.outputs.variant_list>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>get_ref_genotypes/ref"
                },
                "threads": {
                    "type": "str",
                    "value": "<inputs.threads>"
                }
            },
            "cmd": [
                "plink",
                "--bed",
                "<tasks.get_ref_genotypes.inputs.bed>",
                "--bim",
                "<tasks.get_ref_genotypes.inputs.bim>",
                "--fam",
                "<tasks.get_ref_genotypes.inputs.fam>",
                "--keep",
                "<tasks.get_ref_genotypes.inputs.keep>",
                "--extract",
                "<tasks.get_ref_genotypes.inputs.extract>",
                "--make-bed",
                "--out",
                "<tasks.get_ref_genotypes.inputs.file_out_prefix>",
                "--threads",
                "<tasks.get_ref_genotypes.inputs.threads>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "bed": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.inputs.file_out_prefix>.bed"
                },
                "bim": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.inputs.file_out_prefix>.bim"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.inputs.file_out_prefix>.fam"
                },
                "plink_log": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.inputs.file_out_prefix>.log"
                },
                "log": {
                    "type": "file",
                    "value": "get_ref_genotypes.log"
                }
            }
        },
        {
            "active": true,
            "name": "get_merge_conflicts",
            "inputs": {
                "ref_bed": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.outputs.bed>"
                },
                "ref_bim": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.outputs.bim>"
                },
                "ref_fam": {
                    "type": "file",
                    "value": "<tasks.get_ref_genotypes.outputs.fam>"
                },
                "dataset_bed": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.outputs.bed>"
                },
                "dataset_bim": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.outputs.bim>"
                },
                "dataset_fam": {
                    "type": "file",
                    "value": "<tasks.add_pop_ids_to_fam_files.outputs.dataset_fam>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>get_merge_conflicts/dataset_ref"
                },
                "threads": {
                    "type": "str",
                    "value": "<inputs.threads>"
                }
            },
            "cmd": [
                "plink",
                "--bed",
                "<tasks.get_merge_conflicts.inputs.ref_bed>",
                "--bim",
                "<tasks.get_merge_conflicts.inputs.ref_bim>",
                "--fam",
                "<tasks.get_merge_conflicts.inputs.ref_fam>",
                "--bmerge",
                "<tasks.get_merge_conflicts.inputs.dataset_bed>",
                "<tasks.get_merge_conflicts.inputs.dataset_bim>",
                "<tasks.get_merge_conflicts.inputs.dataset_fam>",
                "--merge-mode",
                "7",
                "--make-bed",
                "--out",
                "<tasks.get_merge_conflicts.inputs.file_out_prefix>",
                "--threads",
                "<tasks.get_merge_conflicts.inputs.threads>"
            ],
            "kill_wf_on_error": false,
            "outputs": {
                "missnp": {
                    "type": "file",
                    "value": "<tasks.get_merge_conflicts.inputs.file_out_prefix>.missnp"
                },
                "log": {
                    "type": "file",
                    "value": "get_merge_conflicts.log"
                }
            }
        },
        {
            "active": true,
            "name": "flip_ref",
            "inputs": {
                "bed": {
                    "type": "file",
                    "value": "<inputs.ref_bed>"
                },
                "bim": {
                    "type": "file",
                    "value": "<inputs.ref_bim>"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.add_pop_ids_to_fam_files.outputs.ref_fam>"
                },
                "flip": {
                    "type": "file",
                    "value": "<tasks.get_merge_conflicts.outputs.missnp>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>flip_ref/ref"
                },
                "threads": {
                    "type": "str",
                    "value": "<inputs.threads>"
                }
            },
            "cmd": [
                "plink",
                "--bed",
                "<tasks.flip_ref.inputs.bed>",
                "--bim",
                "<tasks.flip_ref.inputs.bim>",
                "--fam",
                "<tasks.flip_ref.inputs.fam>",
                "--flip",
                "<tasks.flip_ref.inputs.flip>",
                "--make-bed",
                "--out",
                "<tasks.flip_ref.inputs.file_out_prefix>",
                "--threads",
                "<tasks.flip_ref.inputs.threads>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "bed": {
                    "type": "file",
                    "value": "<tasks.flip_ref.inputs.file_out_prefix>.bed"
                },
                "bim": {
                    "type": "file",
                    "value": "<tasks.flip_ref.inputs.file_out_prefix>.bim"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.flip_ref.inputs.file_out_prefix>.fam"
                },
                "plink_log": {
                    "type": "file",
                    "value": "<tasks.flip_ref.inputs.file_out_prefix>.log"
                },
                "log": {
                    "type": "file",
                    "value": "flip_ref.log"
                }
            }
        },
        {
            "active": true,
            "name": "merge_dataset_ref",
            "inputs": {
                "ref_bed": {
                    "type": "file",
                    "value": "<tasks.flip_ref.outputs.bed>"
                },
                "ref_bim": {
                    "type": "file",
                    "value": "<tasks.flip_ref.outputs.bim>"
                },
                "ref_fam": {
                    "type": "file",
                    "value": "<tasks.flip_ref.outputs.fam>"
                },
                "dataset_bed": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.outputs.bed>"
                },
                "dataset_bim": {
                    "type": "file",
                    "value": "<tasks.convert_dataset_to_bfile.outputs.bim>"
                },
                "dataset_fam": {
                    "type": "file",
                    "value": "<tasks.add_pop_ids_to_fam_files.outputs.dataset_fam>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>merge_dataset_ref/dataset_ref"
                },
                "threads": {
                    "type": "str",
                    "value": "<inputs.threads>"
                }
            },
            "cmd": [
                "plink",
                "--bed",
                "<tasks.merge_dataset_ref.inputs.ref_bed>",
                "--bim",
                "<tasks.merge_dataset_ref.inputs.ref_bim>",
                "--fam",
                "<tasks.merge_dataset_ref.inputs.ref_fam>",
                "--bmerge",
                "<tasks.merge_dataset_ref.inputs.dataset_bed>",
                "<tasks.merge_dataset_ref.inputs.dataset_bim>",
                "<tasks.merge_dataset_ref.inputs.dataset_fam>",
                "--make-bed",
                "--allow-no-sex",
                "--out",
                "<tasks.merge_dataset_ref.inputs.file_out_prefix>",
                "--threads",
                "<tasks.merge_dataset_ref.inputs.threads>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "bed": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.inputs.file_out_prefix>.bed"
                },
                "bim": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.inputs.file_out_prefix>.bim"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.inputs.file_out_prefix>.fam"
                },
                "plink_log": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.inputs.file_out_prefix>.log"
                },
                "log": {
                    "type": "file",
                    "value": "merge_dataset_ref.log"
                }
            }
        },
        {
            "active": true,
            "name": "prepare_smartpca_input",
            "inputs": {
                "file_in_bed": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.outputs.bed>"
                },
                "file_in_bim": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.outputs.bim>"
                },
                "file_in_fam": {
                    "type": "file",
                    "value": "<tasks.merge_dataset_ref.outputs.fam>"
                },
                "file_in_pop_id_xref": {
                    "type": "file",
                    "value": "<tasks.get_ref_samples.outputs.ancestry_id_xref>"
                },
                "dataset_name": {
                    "type": "str",
                    "value": "<inputs.dataset_name>"
                },
                "ref_pops": {
                    "type": "str",
                    "value": "<inputs.ancestries_to_include>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>prepare_smartpca_input/dataset_ref_smartpca"
                },
                "smartpca_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>smartpca/dataset_ref_smartpca"
                },
                "threads": {
                    "type": "str",
                    "value": "<inputs.threads>"
                }
            },
            "cmd": [
                "/opt/prepare_smartpca_input.pl",
                "--file_in_bed",
                "<tasks.prepare_smartpca_input.inputs.file_in_bed>",
                "--file_in_bim",
                "<tasks.prepare_smartpca_input.inputs.file_in_bim>",
                "--file_in_fam",
                "<tasks.prepare_smartpca_input.inputs.file_in_fam>",
                "--file_in_pop_id_xref",
                "<tasks.prepare_smartpca_input.inputs.file_in_pop_id_xref>",
                "--dataset_name",
                "<tasks.prepare_smartpca_input.inputs.dataset_name>",
                "--ref_pops",
                "<tasks.prepare_smartpca_input.inputs.ref_pops>",
                "--file_out_prefix",
                "<tasks.prepare_smartpca_input.inputs.file_out_prefix>",
                "--smartpca_out_prefix",
                "<tasks.prepare_smartpca_input.inputs.smartpca_out_prefix>",
                "--threads",
                "<tasks.prepare_smartpca_input.inputs.threads>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "bim": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.inputs.file_out_prefix>.bim"
                },
                "bim_xref": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.inputs.file_out_prefix>_bim_xref.tsv"
                },
                "fam": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.inputs.file_out_prefix>.fam"
                },
                "fam_xref": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.inputs.file_out_prefix>_fam_xref.tsv"
                },
                "pop_list": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.inputs.file_out_prefix>_pop_list.tsv"
                },
                "par": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.inputs.file_out_prefix>_par.txt"
                },
                "log": {
                    "type": "file",
                    "value": "prepare_smartpca_input.log"
                }
            }
        },
        {
            "active": true,
            "name": "smartpca",
            "inputs": {
                "file_in_par": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.outputs.par>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>smartpca/dataset_ref_smartpca"
                }
            },
            "cmd": [
                "smartpca",
                "-p",
                "<tasks.smartpca.inputs.file_in_par>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "evec": {
                    "type": "file",
                    "value": "<tasks.smartpca.inputs.file_out_prefix>.evec"
                },
                "eval": {
                    "type": "file",
                    "value": "<tasks.smartpca.inputs.file_out_prefix>.eval"
                },
                "snpweight": {
                    "type": "file",
                    "value": "<tasks.smartpca.inputs.file_out_prefix>.snpweight"
                },
                "log": {
                    "type": "file",
                    "value": "smartpca.log"
                }
            }
        },
        {
            "active": true,
            "name": "process_smartpca_results",
            "inputs": {
                "file_in_evec": {
                    "type": "file",
                    "value": "<tasks.smartpca.outputs.evec>"
                },
                "file_in_eval": {
                    "type": "file",
                    "value": "<tasks.smartpca.outputs.eval>"
                },
                "file_in_snpweight": {
                    "type": "file",
                    "value": "<tasks.smartpca.outputs.snpweight>"
                },
                "file_in_bim_id_xref": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.outputs.bim_xref>"
                },
                "file_in_fam_id_xref": {
                    "type": "file",
                    "value": "<tasks.prepare_smartpca_input.outputs.fam_xref>"
                },
                "file_out_prefix": {
                    "type": "str",
                    "value": "<inputs.final_file_location>process_smartpca_results/dataset_ref_smartpca"
                }
            },
            "cmd": [
                "/opt/process_smartpca_results.pl",
                "--file_in_evec",
                "<tasks.process_smartpca_results.inputs.file_in_evec>",
                "--file_in_eval",
                "<tasks.process_smartpca_results.inputs.file_in_eval>",
                "--file_in_snpweight",
                "<tasks.process_smartpca_results.inputs.file_in_snpweight>",
                "--file_in_bim_id_xref",
                "<tasks.process_smartpca_results.inputs.file_in_bim_id_xref>",
                "--file_in_fam_id_xref",
                "<tasks.process_smartpca_results.inputs.file_in_fam_id_xref>",
                "--file_out_prefix",
                "<tasks.process_smartpca_results.inputs.file_out_prefix>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "evec": {
                    "type": "file",
                    "value": "<tasks.process_smartpca_results.inputs.file_out_prefix>_evec.tsv"
                },
                "eval": {
                    "type": "file",
                    "value": "<tasks.process_smartpca_results.inputs.file_out_prefix>_eval.tsv"
                },
                "snpweight": {
                    "type": "file",
                    "value": "<tasks.process_smartpca_results.inputs.file_out_prefix>_snpweight.tsv"
                },
                "log": {
                    "type": "file",
                    "value": "process_smartpca_results.log"
                }
            }
        },
        {
            "active": true,
            "name": "assign_ancestry_mahalanobis",
            "inputs": {
                "file_in_evec": {
                    "type": "file",
                    "value": "<tasks.process_smartpca_results.outputs.evec>"
                },
                "ref_ancestries": {
                    "type": "file",
                    "value": "<inputs.ancestries_to_include>"
                },
                "dataset_name": {
                    "type": "file",
                    "value": "<inputs.dataset_name>"
                },
                "std_dev_cutoff": {
                    "type": "int",
                    "value": "<inputs.std_dev_cutoff>"
                },
                "out_dir": {
                    "type": "str",
                    "value": "<inputs.final_file_location>assign_ancestry_mahalanobis/"
                }
            },
            "cmd": [
                "Rscript",
                "/opt/assign_ancestry_mahalanobis.R",
                "--file-pcs",
                "<tasks.assign_ancestry_mahalanobis.inputs.file_in_evec>",
                "--pc-count",
                "10",
                "--dataset",
                "<tasks.assign_ancestry_mahalanobis.inputs.dataset_name>",
                "--dataset-legend-label",
                "<tasks.assign_ancestry_mahalanobis.inputs.dataset_name>",
                "--ref-pops",
                "<tasks.assign_ancestry_mahalanobis.inputs.ref_ancestries>",
                "--ref-pops-legend-labels",
                "<tasks.assign_ancestry_mahalanobis.inputs.ref_ancestries>",
                "--out-dir",
                "<tasks.assign_ancestry_mahalanobis.inputs.out_dir>",
                "--use-pcs-count",
                "10",
                "--midpoint-formula",
                "median",
                "--std-dev-cutoff",
                "<tasks.assign_ancestry_mahalanobis.inputs.std_dev_cutoff>",
                "--scale-to-ref"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "log": {
                    "type": "file",
                    "value": "assign_ancestry_mahalanobis.log"
                },
                "raw_ancestry_assignment": {
                    "type": "file",
                    "value": "<tasks.assign_ancestry_mahalanobis.inputs.dataset_name>_raw_ancestry_assignments.tsv"
                }
            }
        },
        {
            "active": true,
            "name": "get_ancestry_assignment",
            "inputs": {
                "file_in_raw_ancestry_assignment": {
                    "type": "file",
                    "value": "<tasks.assign_ancestry_mahalanobis.outputs.raw_ancestry_assignment>"
                },
                "std_dev_cutoff": {
                    "type": "int",
                    "value": "<inputs.std_dev_cutoff>"
                },
                "file_out_ancestry_assignment": {
                    "type": "str",
                    "value": "<inputs.final_file_location>ancestry_assignment.txt"
                }
            },
            "cmd": [
                "/opt/get_ancestry_assignment.pl",
                "--file_in_raw_ancestry_assignment",
                "<tasks.get_ancestry_assignment.inputs.file_in_raw_ancestry_assignment>",
                "--std_dev_cutoff",
                "<tasks.get_ancestry_assignment.inputs.std_dev_cutoff>",
                "--file_out_ancestry_assignment",
                "<tasks.get_ancestry_assignment.inputs.file_out_ancestry_assignment>"
            ],
            "kill_wf_on_error": true,
            "outputs": {
                "ancestry_assignmment": {
                    "type": "file",
                    "value": "<tasks.get_ancestry_assignment.inputs.file_out_ancestry_assignment>"
                },
                "log": {
                    "type": "file",
                    "value": "get_ancestry_assignment.log"
                }
            }
        }
    ],
    "outputs": {
        "ancestry_assignmment": {
            "type": "file",
            "value": "<tasks.get_ancestry_assignment.outputs.ancestry_assignment>"
        },
        "log": {
            "type": "file",
            "value": "<inputs.final_file_location>ancestry_assignment.log"
        }
    }
}
